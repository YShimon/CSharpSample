<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    // 追加する型のコレクション
    var types = new[]
    {
        typeof(Int16),
        typeof(Int32),
        typeof(Int64),
        typeof(UInt16),
        typeof(UInt32),
        typeof(UInt64),
        typeof(byte), 
        typeof(sbyte),
    };
 
    // 型名を取得するメソッド
    Func<Type, string> GetTypeName = t =>
    {
        return t.Name == nameof(Byte) ? "UInt8" : (t.Name == nameof(SByte)) ? "Int8" : t.Name;
    };
#>
// <auto-generated>
// このファイルは自動生成されています。
// コードを修正する際は、このファイルは修正せず、*.ttファイルを修正して下さい。
// </auto-generated>
using System;
 
namespace T4.DesigneTime
{
<# foreach(var t in types) { #>
    public sealed class T4Sample<#= t.Name #>
    {
        public static readonly T4Sample<#= t.Name #> Instance = new T4Sample<#= t.Name #>();

        private T4Sample<#= t.Name #>()
        {
        }
 
        public <#= t.Name #> To<#= GetTypeName(t) #>(string value)
            => <#= t.Name #>.Parse(value);
    }
 
<# } #>
}